{"version":3,"sources":["components/CountdownCard.js","components/Clock.js","data/countdownDates.js","App.js","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","cardStyle","paddingTop","paddingLeft","paddingRight","paddingBottom","overflow","borderRadius","typography","fontSize","CountdownCard","props","classes","name","date","startDateStr","startDate","endDateStr","endDate","Date","parse","endDateObj","totalTime","useState","barProgress","setBarProgress","timeLeft","setTimeLeft","calculateProgress","now","useEffect","setInterval","msInDay","msInHour","msInMin","msInSecond","daysLeft","Math","floor","daysLeftRemainder","hoursLeft","hoursLeftRemainder","minsLeft","minsLeftRemainder","secondsLeft","getTimeLeftStr","dateFormatted","getDate","slice","monthFormatted","getMonth","dateString","getFullYear","cardNameText","cardDateText","Card","className","Typography","LinearProgress","variant","value","textStyle","textAlign","padding","Clock","moment","format","setDate","countdownDates","boxStyle","App","Box","Grid","container","spacing","direction","justifyContent","alignItems","item","xs","map","dateObj","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.164ee4bc.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles'\nimport {\n    Card,\n    Typography,\n    LinearProgress\n} from '@material-ui/core';\n\n\n\nconst useStyles = makeStyles({\n    cardStyle: {\n        paddingTop: '2%',\n        paddingLeft: '2%',\n        paddingRight: '2%',\n        paddingBottom: '2%',\n        overflow: 'auto',\n        borderRadius: 4\n    },\n    typography: {\n        fontSize : 24\n    }\n});\n\n\nfunction CountdownCard(props) {\n    const classes = useStyles();\n    // strings of the name, and start and end dates in (hopefully) correct formats\n    const name = props.date.name;\n    const startDateStr = props.date.startDate;\n    const endDateStr = props.date.endDate;\n\n\n\n\n    \n\n    // values are in milliseconds\n    const startDate = Date.parse(startDateStr);\n    const endDate = Date.parse(endDateStr);\n    const endDateObj = new Date(endDate);\n    const totalTime = endDate - startDate;\n\n\n    // barProgress should be a percentage as a number(50 = 50%, 24.5 = 24.5%)\n    const [barProgress, setBarProgress] = useState(0);\n    const [timeLeft, setTimeLeft] = useState(0);\n    //const [eventPassed, setEventPassed] = useState(false);\n    //console.log((Date.now() / endDate));\n\n\n    // updates the countdown every half second.\n    useEffect(() => {\n        setInterval(() => {\n            // check if the date has already passed and fill out the progress bar else update normally\n            if(calculateProgress() >= 100){\n                setBarProgress(100);\n                setTimeLeft(\"Countdown Finished!\");\n                //setEventPassed(true);\n            }else{\n                setBarProgress(calculateProgress());\n                setTimeLeft(getTimeLeftStr(endDateObj));\n            }\n \n        }, 500);\n    });\n\n\n\n    // returns the progress of the countdown\n    function calculateProgress() {\n        return ((Date.now() - startDate) / totalTime) * 100;\n    }\n\n\n\n    // const timeLeftStr = calculateProgress();\n\n\n    // ty: https://stackoverflow.com/a/6040556 for doing double digit month/date\n    const dateFormatted = (\"0\" + endDateObj.getDate()).slice(-2);\n    const monthFormatted = (\"0\" + (endDateObj.getMonth() + 1)).slice(-2)\n    const dateString = `${endDateObj.getFullYear()}.${monthFormatted}.${dateFormatted}`\n\n    \n    const cardNameText = `${name}`;\n    const cardDateText = `${dateString}`;\n\n\n    //const cardTimeLeftText = ''\n\n    \n\n\n    return(\n        <Card className={classes.cardStyle}>\n            <Typography className={classes.typography}>{cardNameText} on {cardDateText}</Typography>\n            <Typography className={classes.typography}>{timeLeft}</Typography>\n            <LinearProgress variant=\"determinate\" value={barProgress} />\n        </Card>\n    );\n\n\n    \n}\n\n\n// return string of how many days, hours, min, sec, left.\nfunction getTimeLeftStr(endDateObj) {\n    const timeLeft = endDateObj - Date.now();\n\n    const msInDay = 1000 * 60 * 60 * 24;\n    const msInHour = 1000*60*60;\n    const msInMin = 1000*60;\n    const msInSecond = 1000;\n\n    const daysLeft = Math.floor(timeLeft / msInDay); // 1000ms -> 60 sec -> 60 min -> 24 hrs in a day\n    const daysLeftRemainder = timeLeft % msInDay;\n\n    const hoursLeft = Math.floor(daysLeftRemainder / msInHour);\n    const hoursLeftRemainder = daysLeftRemainder % msInHour;\n\n    const minsLeft = Math.floor(hoursLeftRemainder / msInMin);\n    const minsLeftRemainder = hoursLeftRemainder % msInMin;\n\n    const secondsLeft = Math.floor(minsLeftRemainder / msInSecond);\n\n    \n\n    return (`${daysLeft} days, ${hoursLeft} hours, ${minsLeft} mins, ${secondsLeft} seconds left`);\n\n\n    \n}\n\n\nexport default CountdownCard;","import React, { useState, useEffect } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport moment from 'moment';\r\nimport Card from '@material-ui/core/Card'\r\nimport Typography from '@material-ui/core/Typography'\r\n\r\n\r\n\r\n\r\nconst useStyles = makeStyles({\r\n    textStyle: {\r\n        textAlign: \"center\",\r\n        fontSize: 48\r\n    },\r\n    cardStyle: {\r\n        borderRadius: 4,\r\n        padding: '2%'\r\n    }\r\n});\r\n\r\n\r\n\r\n\r\n\r\n// moment().format(\"[It's] dddd: HH[:]mm[:]ss\");\r\nfunction Clock() {\r\n    const classes = useStyles();\r\n    // [the value of the current state, the function that can be used to update the state] = useState(default value);\r\n    const [dateString, setDate] = useState(moment().format(\"YYYY.MM.DD | HH[:]mm[:]ss\"));\r\n\r\n    // effect is an effect that runs,\r\n    useEffect(() => {\r\n        setInterval(() => {\r\n            // setinterval runs every 1 sec, and call the setDate and update it\r\n            setDate(moment().format(\"YYYY.MM.DD | HH[:]mm[:]ss\"));\r\n        }, 1000);\r\n    });\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            <Card className={classes.cardStyle}>\r\n                <Typography className={classes.textStyle} variant=\"h4\">{dateString}</Typography>\r\n            </Card>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n\r\n\r\nexport default Clock;\r\n\r\n// oh i think im supposed to use \"useEffect\" and some hooks, ","const countdownDates = [\n    {\n        \"name\": \"LOONA: Not Friends\",\n        \"startDate\": '01 Sep 2021 00:00:00 EST',\n        \"endDate\": '2021-09-03T18:00:00.000+09:00'\n    },\n\n    {\n        \"name\": \"LOONA: Hula Hoop\",\n        \"startDate\": '01 Sep 2021 00:00:00 EST',\n        \"endDate\": '2021-09-15T00:00:00.000+09:00'\n    },\n\n    {\n        \"name\": \"TWICE: The Feels\",\n        \"startDate\": '23 Aug 2021 00:00:00 EST',\n        \"endDate\": '2021-10-01T13:00:00.000+09:00'\n    },\n\n    {\n        \"name\": \"End of Year\",\n        \"startDate\": \"2021-01-01T00:00:00\",\n        \"endDate\": \"2022-01-01T00:00:00\",\n    }\n\n    \n]\n\nexport default countdownDates;","import './App.css';\nimport CountdownCard from './components/CountdownCard';\nimport Clock from './components/Clock'\nimport { Grid, Box } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport countdownDates from './data/countdownDates.js';\n\n\nconst useStyles = makeStyles({\n  boxStyle: {\n    paddingTop: '5%',\n    paddingBottom: '5%',\n    paddingLeft: '5%',\n    paddingRight: '5%'\n  }\n})\n\n\nfunction App() {\n  //ISO Date with year should be YYYY-MM-DDTHH:MM:SSZ):\n  // for later: https://www.w3schools.com/js/js_date_formats.asp\n\n  const classes = useStyles();\n  return (\n    <Box className={classes.boxStyle}>\n      <Grid\n        container\n        spacing={4}\n        direction='column'\n        justifyContent='flex-start'\n        alignItems='stretch'\n      >\n        <Grid item xs={12} spacing={4}>\n          <Clock />\n        </Grid>\n      <Grid container spacing={4}>\n        {countdownDates.map(dateObj => {\n          return(\n            <Grid item xs={12}>\n              <CountdownCard date={dateObj}/>\n            </Grid>\n          );\n        })}\n      </Grid>\n      </Grid>\n\n    </Box>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}