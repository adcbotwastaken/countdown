{"version":3,"sources":["components/CountdownCard.js","components/Clock.js","data/countdownDates.js","App.js","reportWebVitals.js","index.js"],"names":["CountdownCard","props","name","date","startDateStr","startDate","endDateStr","endDate","Date","parse","endDateObj","totalTime","useState","barProgress","setBarProgress","calculateProgress","now","useEffect","setInterval","monthFormatted","getDate","slice","dateFormatted","getMonth","dateString","getFullYear","cardText","Card","Typography","LinearProgress","variant","value","useStyles","makeStyles","textStyle","textAlign","cardStyle","borderRadius","Clock","classes","moment","format","setDate","className","countdownDates","boxStyle","paddingTop","paddingBottom","paddingLeft","paddingRight","App","Box","Grid","container","spacing","direction","justifyContent","alignItems","item","xs","map","dateObj","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kPA4FeA,MAtEf,SAAuBC,GAEnB,IAAMC,EAAOD,EAAME,KAAKD,KAClBE,EAAeH,EAAME,KAAKE,UAC1BC,EAAaL,EAAME,KAAKI,QAQxBF,EAAYG,KAAKC,MAAML,GACvBG,EAAUC,KAAKC,MAAMH,GACrBI,EAAa,IAAIF,KAAKD,GACtBI,EAAYJ,EAAUF,EAI5B,EAAsCO,mBAAS,GAA/C,mBAAOC,EAAP,KAAoBC,EAApB,KAsBA,SAASC,IACL,OAASP,KAAKQ,MAAQX,GAAaM,EAAa,IAjBpDM,qBAAU,WACNC,aAAY,WAELH,KAAuB,IACtBD,EAAe,KAGfA,EAAeC,OAGpB,QAcP,IAAMI,GAAkB,IAAMT,EAAWU,WAAWC,OAAO,GACrDC,GAAiB,KAAOZ,EAAWa,WAAa,IAAIF,OAAO,GAC3DG,EAAU,UAAMd,EAAWe,cAAjB,YAAkCN,EAAlC,YAAoDG,GAE9DI,EAAQ,UAAMxB,EAAN,eAAiBsB,GAK/B,OACI,eAACG,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,UAAaF,IACb,cAACG,EAAA,EAAD,CAAgBC,QAAQ,cAAcC,MAAOlB,Q,yBC1EnDmB,EAAYC,YAAW,CACzBC,UAAW,CACPC,UAAW,UAEfC,UAAW,CACPC,aAAc,KAoCPC,MA3Bf,WACI,IAAMC,EAAUP,IAEhB,EAA8BpB,mBAAS4B,MAASC,OAAO,8BAAvD,mBAAOjB,EAAP,KAAmBkB,EAAnB,KAYA,OATAzB,qBAAU,WACNC,aAAY,WAERwB,EAAQF,MAASC,OAAO,gCACzB,QAMH,8BACI,cAACd,EAAA,EAAD,CAAMgB,UAAWJ,EAAQH,UAAzB,SACI,cAACR,EAAA,EAAD,CAAYe,UAAWJ,EAAQL,UAAWJ,QAAQ,KAAlD,SAAwDN,S,gBCrBzDoB,EApBQ,CACnB,CACI,KAAQ,cACR,UAAa,2BACb,QAAW,iCAGf,CACI,KAAQ,YACR,UAAa,2BACb,QAAW,iCAGf,CACI,KAAQ,cACR,UAAa,sBACb,QAAW,wBCRbZ,EAAYC,YAAW,CAC3BY,SAAU,CACRC,WAAY,KACZC,cAAe,KACfC,YAAa,KACbC,aAAc,QAqCHC,MAhCf,WAIE,IAAMX,EAAUP,IAChB,OACE,cAACmB,EAAA,EAAD,CAAKR,UAAWJ,EAAQM,SAAxB,SACE,eAACO,EAAA,EAAD,CACEC,WAAS,EACTC,QAAS,EACTC,UAAU,SACVC,eAAe,aACfC,WAAW,UALb,UAOE,cAACL,EAAA,EAAD,CAAMM,MAAI,EAACC,GAAI,GAAIL,QAAS,EAA5B,SACE,cAAC,EAAD,MAEJ,cAACF,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAzB,SACGV,EAAegB,KAAI,SAAAC,GAClB,OACE,cAACT,EAAA,EAAD,CAAMM,MAAI,EAACC,GAAI,GAAf,SACE,cAAC,EAAD,CAAexD,KAAM0D,iBC3BpBC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.8bb96a49.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\n//import { makeStyles } from '@material-ui/core/styles'\nimport {\n    Card,\n    Typography,\n    LinearProgress\n} from '@material-ui/core';\n\n\n\n// const useStyles = makeStyles({\n//     cardStyle: {\n//         padding: \"15px\",\n//         borderRadius: 32,\n//         minHeight: '15vw',\n//         maxHeight: '30vw',\n//         overflow: 'auto',\n\n//     }\n// });\n\n\nfunction CountdownCard(props) {\n    // strings of the name, and start and end dates in (hopefully) correct formats\n    const name = props.date.name;\n    const startDateStr = props.date.startDate;\n    const endDateStr = props.date.endDate;\n\n\n\n\n    \n\n    // values are in milliseconds\n    const startDate = Date.parse(startDateStr);\n    const endDate = Date.parse(endDateStr);\n    const endDateObj = new Date(endDate);\n    const totalTime = endDate - startDate;\n\n\n    // barProgress should be a percentage as a number(50 = 50%, 24.5 = 24.5%)\n    const [barProgress, setBarProgress] = useState(0);\n    //const [eventPassed, setEventPassed] = useState(false);\n    //console.log((Date.now() / endDate));\n\n\n    // updates the countdown every half second.\n    useEffect(() => {\n        setInterval(() => {\n            // check if the date has already passed and fill out the progress bar else update normally\n            if(calculateProgress() >= 100){\n                setBarProgress(100);\n                //setEventPassed(true);\n            }else{\n                setBarProgress(calculateProgress());\n            }\n \n        }, 500);\n    });\n\n\n\n    // returns the progress of the countdown\n    function calculateProgress() {\n        return ((Date.now() - startDate) / totalTime) * 100;\n    }\n\n    // const timeLeftStr = calculateProgress();\n\n\n    // ty: https://stackoverflow.com/a/6040556 for doing double digit month/date\n    const monthFormatted = (\"0\" + endDateObj.getDate()).slice(-2);\n    const dateFormatted = (\"0\" + (endDateObj.getMonth() + 1)).slice(-2)\n    const dateString = `${endDateObj.getFullYear()}.${monthFormatted}.${dateFormatted}`\n    \n    const cardText = `${name} on ${dateString}`;\n\n    \n\n\n    return(\n        <Card>\n            <Typography>{cardText}</Typography>\n            <LinearProgress variant=\"determinate\" value={barProgress} />\n        </Card>\n    );\n\n\n    \n}\n\n\nexport default CountdownCard;","import React, { useState, useEffect } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport moment from 'moment';\r\nimport Card from '@material-ui/core/Card'\r\nimport Typography from '@material-ui/core/Typography'\r\n\r\n\r\n\r\n\r\nconst useStyles = makeStyles({\r\n    textStyle: {\r\n        textAlign: \"center\"\r\n    },\r\n    cardStyle: {\r\n        borderRadius: 4\r\n    }\r\n});\r\n\r\n\r\n\r\n\r\n\r\n// moment().format(\"[It's] dddd: HH[:]mm[:]ss\");\r\nfunction Clock() {\r\n    const classes = useStyles();\r\n    // [the value of the current state, the function that can be used to update the state] = useState(default value);\r\n    const [dateString, setDate] = useState(moment().format(\"YYYY.MM.DD | HH[:]mm[:]ss\"));\r\n\r\n    // effect is an effect that runs,\r\n    useEffect(() => {\r\n        setInterval(() => {\r\n            // setinterval runs every 1 sec, and call the setDate and update it\r\n            setDate(moment().format(\"YYYY.MM.DD | HH[:]mm[:]ss\"));\r\n        }, 1000);\r\n    });\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            <Card className={classes.cardStyle}>\r\n                <Typography className={classes.textStyle} variant=\"h4\">{dateString}</Typography>\r\n            </Card>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n\r\n\r\nexport default Clock;\r\n\r\n// oh i think im supposed to use \"useEffect\" and some hooks, ","const countdownDates = [\n    {\n        \"name\": \"Not Friends\",\n        \"startDate\": '01 Sep 2021 00:00:00 EST',\n        \"endDate\": '2021-09-03T18:00:00.000+09:00'\n    },\n\n    {\n        \"name\": \"Hula Hoop\",\n        \"startDate\": '01 Sep 2021 00:00:00 EST',\n        \"endDate\": '2021-09-15T18:00:00.000+09:00'\n    },\n\n    {\n        \"name\": \"End of Year\",\n        \"startDate\": \"2021-01-01T00:00:00\",\n        \"endDate\": \"2022-01-01T00:00:00\",\n    }\n]\n\nexport default countdownDates;","import './App.css';\nimport CountdownCard from './components/CountdownCard';\nimport Clock from './components/Clock'\nimport { Grid, Box } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport countdownDates from './data/countdownDates.js';\n\n\nconst useStyles = makeStyles({\n  boxStyle: {\n    paddingTop: '5%',\n    paddingBottom: '5%',\n    paddingLeft: '5%',\n    paddingRight: '5%'\n  }\n})\n\n\nfunction App() {\n  //ISO Date with year should be YYYY-MM-DDTHH:MM:SSZ):\n  // for later: https://www.w3schools.com/js/js_date_formats.asp\n\n  const classes = useStyles();\n  return (\n    <Box className={classes.boxStyle}>\n      <Grid\n        container\n        spacing={2}\n        direction='column'\n        justifyContent='flex-start'\n        alignItems='stretch'\n      >\n        <Grid item xs={12} spacing={3}>\n          <Clock />\n        </Grid>\n      <Grid container spacing={3}>\n        {countdownDates.map(dateObj => {\n          return(\n            <Grid item xs={12}>\n              <CountdownCard date={dateObj}/>\n            </Grid>\n          );\n        })}\n      </Grid>\n      </Grid>\n\n    </Box>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}