{"version":3,"sources":["components/CountdownCard.js","components/Clock.js","data/countdownDates.js","App.js","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","cardStyle","overflow","borderRadius","typography","fontSize","calculateProgress","startDate","totalTime","Date","now","CountdownCard","props","classes","name","date","startDateStr","endDateStr","endDate","parse","endDateObj","useState","barProgress","setBarProgress","timeLeft","setTimeLeft","barColour","setBarColour","useEffect","interval","setInterval","msInDay","msInHour","msInMin","msInSecond","daysLeft","Math","floor","daysLeftRemainder","hoursLeft","hoursLeftRemainder","minsLeft","minsLeftRemainder","secondsLeft","getTimeLeftStr","clearInterval","dateFormatted","getDate","slice","monthFormatted","getMonth","dateString","getFullYear","cardNameText","cardDateText","Card","className","CardContent","Typography","LinearProgress","variant","value","color","textStyle","textAlign","Clock","moment","format","setDate","countdownDates","boxStyle","paddingTop","paddingBottom","paddingLeft","paddingRight","App","Box","Grid","container","spacing","direction","justifyContent","alignItems","item","xs","map","dateObj","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kQAWMA,EAAYC,YAAW,CACzBC,UAAW,CACPC,SAAU,OACVC,aAAc,GAElBC,WAAY,CACRC,SAAW,MAsEnB,SAASC,EAAkBC,EAAWC,GAElC,OAASC,KAAKC,MAAQH,GAAaC,EAAa,IAiCrCG,MApGf,SAAuBC,GACnB,IAAMC,EAAUd,IAEVe,EAAOF,EAAMG,KAAKD,KAClBE,EAAeJ,EAAMG,KAAKR,UAC1BU,EAAaL,EAAMG,KAAKG,QAGxBX,EAAYE,KAAKU,MAAMH,GACvBE,EAAUT,KAAKU,MAAMF,GACrBG,EAAa,IAAIX,KAAKS,GACtBV,EAAYU,EAAUX,EAI5B,EAAsCc,mBAAS,GAA/C,mBAAOC,EAAP,KAAoBC,EAApB,KACA,EAAgCF,mBAAS,GAAzC,mBAAOG,EAAP,KAAiBC,EAAjB,KACA,EAAkCJ,mBAAS,WAA3C,mBAAOK,EAAP,KAAkBC,EAAlB,KAGAC,qBAAU,WACN,IAAMC,EAAWC,aAAY,WAYzB,OAVGxB,EAAkBC,EAAWC,IAAc,KAC1Ce,EAAe,KACfE,EAAY,uBACZE,EAAa,eAEbJ,EAAejB,EAAkBC,EAAWC,IAC5CiB,EA2ChB,SAAwBL,GACpB,IAAMI,EAAWJ,EAAaX,KAAKC,MAE7BqB,EAAU,MACVC,EAAW,KACXC,EAAU,IACVC,EAAa,IAEbC,EAAWC,KAAKC,MAAMb,EAAWO,GACjCO,EAAoBd,EAAWO,EAE/BQ,EAAYH,KAAKC,MAAMC,EAAoBN,GAC3CQ,EAAqBF,EAAoBN,EAEzCS,EAAWL,KAAKC,MAAMG,EAAqBP,GAC3CS,EAAoBF,EAAqBP,EAEzCU,EAAcP,KAAKC,MAAMK,EAAoBR,GAInD,MAAM,GAAN,OAAWC,EAAX,kBAA6BI,EAA7B,mBAAiDE,EAAjD,kBAAmEE,EAAnE,iBAhEwBC,CAAexB,KAIxB,kBAAMyB,cAAchB,MAC5B,OACL,IAIF,IAAMiB,GAAiB,IAAM1B,EAAW2B,WAAWC,OAAO,GACpDC,GAAkB,KAAO7B,EAAW8B,WAAa,IAAIF,OAAO,GAC5DG,EAAU,UAAM/B,EAAWgC,cAAjB,YAAkCH,EAAlC,YAAoDH,GAG9DO,EAAY,UAAMvC,GAClBwC,EAAY,UAAMH,GAExB,OACI,cAACI,EAAA,EAAD,CAAMC,UAAW3C,EAAQZ,UAAzB,SACI,eAACwD,EAAA,EAAD,WACA,eAACC,EAAA,EAAD,CAAYF,UAAW3C,EAAQT,WAA/B,UAA4CiD,EAA5C,OAA8DC,KAC9D,cAACI,EAAA,EAAD,CAAYF,UAAW3C,EAAQT,WAA/B,SAA4CoB,IAC5C,cAACmC,EAAA,EAAD,CAAgBC,QAAQ,cAAcC,MAAOvC,EAAawC,MAAOpC,U,iBChEvE3B,EAAYC,YAAW,CACzB+D,UAAW,CACPC,UAAW,SACX3D,SAAU,IAEdJ,UAAW,CACPE,aAAc,KAwCP8D,MA/Bf,WACI,IAAMpD,EAAUd,IAEhB,EAA8BsB,mBAAS6C,MAASC,OAAO,8BAAvD,mBAAOhB,EAAP,KAAmBiB,EAAnB,KAcA,OAXAxC,qBAAU,WACN,IAAMC,EAAWC,aAAY,WAEzBsC,EAAQF,MAASC,OAAO,gCACzB,KAEH,OAAM,kBAAMtB,cAAchB,MAC3B,IAKC,8BACI,cAAC0B,EAAA,EAAD,CAAMC,UAAW3C,EAAQZ,UAAzB,SACI,cAACwD,EAAA,EAAD,UACI,cAACC,EAAA,EAAD,CAAYF,UAAW3C,EAAQkD,UAAWH,QAAQ,KAAlD,SAAwDT,W,gBC4C7DkB,EA1FQ,CAgEnB,CACI,KAAQ,cACR,UAAa,sBACb,QAAW,uBAGf,CACI,KAAQ,mBACR,UAAa,2BACb,QAAW,iCAGf,CACI,KAAQ,4BACR,UAAa,2BACb,QAAW,kCCvEbtE,EAAYC,YAAW,CAC3BsE,SAAU,CACRC,WAAY,KACZC,cAAe,KACfC,YAAa,KACbC,aAAc,QAuCHC,MAlCf,WAIE,IAAM9D,EAAUd,IAChB,OACE,cAAC6E,EAAA,EAAD,CAAKpB,UAAW3C,EAAQyD,SAAxB,SACE,eAACO,EAAA,EAAD,CACEC,WAAS,EACTC,QAAS,EACTC,UAAU,SACVC,eAAe,aACfC,WAAW,UALb,UAOE,cAACL,EAAA,EAAD,CAAMM,MAAI,EAACC,GAAI,GAAIL,QAAS,EAA5B,SACE,cAAC,EAAD,MAEF,cAACF,EAAA,EAAD,CAAMM,MAAI,EAACC,GAAI,GAAIL,QAAS,EAA5B,SACE,cAACF,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAzB,SACGV,EAAegB,KAAI,SAAAC,GAClB,OACE,cAACT,EAAA,EAAD,CAAMM,MAAI,EAACC,GAAI,GAAIL,QAAS,EAA5B,SACE,cAAC,EAAD,CAAehE,KAAMuE,mBC5BxBC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.d218c8ef.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles'\nimport {\n    Card,\n    CardContent,\n    Typography,\n    LinearProgress\n} from '@material-ui/core';\n\n\n\nconst useStyles = makeStyles({\n    cardStyle: {\n        overflow: 'auto',\n        borderRadius: 4\n    },\n    typography: {\n        fontSize : 24\n    }\n});\n\n\nfunction CountdownCard(props) {\n    const classes = useStyles();\n    // strings of the name, and start and end dates in (hopefully) correct formats\n    const name = props.date.name;\n    const startDateStr = props.date.startDate;\n    const endDateStr = props.date.endDate;\n\n    // parsing the prop strings into dates/milliseconds\n    const startDate = Date.parse(startDateStr);\n    const endDate = Date.parse(endDateStr);\n    const endDateObj = new Date(endDate);\n    const totalTime = endDate - startDate;\n\n\n    // barProgress should be a percentage as a number(50 = 50%, 24.5 = 24.5%)\n    const [barProgress, setBarProgress] = useState(0);\n    const [timeLeft, setTimeLeft] = useState(0);\n    const [barColour, setBarColour] = useState('primary');\n\n    // updates the countdown every half second.\n    useEffect(() => {\n        const interval = setInterval(() => {\n            // check if the date has already passed and fill out the progress bar else update normally\n            if(calculateProgress(startDate, totalTime) >= 100){\n                setBarProgress(100);\n                setTimeLeft(\"Countdown Finished!\");\n                setBarColour('secondary');\n            }else{\n                setBarProgress(calculateProgress(startDate, totalTime));\n                setTimeLeft(getTimeLeftStr(endDateObj));\n            }\n\n            //should help with performance https://devtrium.com/posts/set-interval-react\n            return () => clearInterval(interval);\n        }, 1000);\n    },[]);\n\n\n    // ty: https://stackoverflow.com/a/6040556 for formatting double digit month/date\n    const dateFormatted = (\"0\" + endDateObj.getDate()).slice(-2);\n    const monthFormatted = (\"0\" + (endDateObj.getMonth() + 1)).slice(-2)\n    const dateString = `${endDateObj.getFullYear()}.${monthFormatted}.${dateFormatted}`\n\n    // building the strings for the card\n    const cardNameText = `${name}`;\n    const cardDateText = `${dateString}`;\n\n    return(\n        <Card className={classes.cardStyle}>\n            <CardContent>\n            <Typography className={classes.typography}>{cardNameText} on {cardDateText}</Typography>\n            <Typography className={classes.typography}>{timeLeft}</Typography>\n            <LinearProgress variant=\"determinate\" value={barProgress} color={barColour}/>\n            </CardContent>\n        </Card>\n    );\n\n\n    \n}\n\n\n\n\n// returns the progress of the countdown\nfunction calculateProgress(startDate, totalTime) {\n    //console.log(\"test\");\n    return ((Date.now() - startDate) / totalTime) * 100;\n}\n\n\n// return string of how many days, hours, min, sec, left.\nfunction getTimeLeftStr(endDateObj) {\n    const timeLeft = endDateObj - Date.now();\n\n    const msInDay = 1000 * 60 * 60 * 24;\n    const msInHour = 1000*60*60;\n    const msInMin = 1000*60;\n    const msInSecond = 1000;\n\n    const daysLeft = Math.floor(timeLeft / msInDay); // 1000ms -> 60 sec -> 60 min -> 24 hrs in a day\n    const daysLeftRemainder = timeLeft % msInDay;\n\n    const hoursLeft = Math.floor(daysLeftRemainder / msInHour);\n    const hoursLeftRemainder = daysLeftRemainder % msInHour;\n\n    const minsLeft = Math.floor(hoursLeftRemainder / msInMin);\n    const minsLeftRemainder = hoursLeftRemainder % msInMin;\n\n    const secondsLeft = Math.floor(minsLeftRemainder / msInSecond);\n\n    \n\n    return (`${daysLeft} days, ${hoursLeft} hours, ${minsLeft} mins, ${secondsLeft} seconds left`);\n\n\n    \n}\n\n\nexport default CountdownCard;","import React, { useState, useEffect } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport moment from 'moment';\r\nimport Card from '@material-ui/core/Card'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport CardContent from '@material-ui/core/CardContent'\r\n\r\n\r\n\r\n\r\nconst useStyles = makeStyles({\r\n    textStyle: {\r\n        textAlign: \"center\",\r\n        fontSize: 48\r\n    },\r\n    cardStyle: {\r\n        borderRadius: 4,\r\n    }\r\n});\r\n\r\n\r\n\r\n\r\n\r\n// moment().format(\"[It's] dddd: HH[:]mm[:]ss\");\r\nfunction Clock() {\r\n    const classes = useStyles();\r\n    // [the value of the current state, the function that can be used to update the state] = useState(default value);\r\n    const [dateString, setDate] = useState(moment().format(\"YYYY.MM.DD | HH[:]mm[:]ss\"));\r\n\r\n    // effect is an effect that runs,\r\n    useEffect(() => {\r\n        const interval = setInterval(() => {\r\n            // setinterval runs every 1 sec, and call the setDate and update it\r\n            setDate(moment().format(\"YYYY.MM.DD | HH[:]mm[:]ss\"));\r\n        }, 1000);\r\n        // should help with performance? https://devtrium.com/posts/set-interval-react\r\n        return() => clearInterval(interval);\r\n    }, []);\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            <Card className={classes.cardStyle}>\r\n                <CardContent>\r\n                    <Typography className={classes.textStyle} variant=\"h4\">{dateString}</Typography>\r\n                </CardContent>\r\n            </Card>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n\r\n\r\nexport default Clock;\r\n\r\n// oh i think im supposed to use \"useEffect\" and some hooks, ","const countdownDates = [\n    // {\n    //     \"name\": \"LOONA: Not Friends\",\n    //     \"startDate\": '01 Sep 2021 00:00:00 EST',\n    //     \"endDate\": '2021-09-03T18:00:00.000+09:00'\n    // },\n\n    // {\n    //     \"name\": \"LOONA: Hula Hoop\",\n    //     \"startDate\": '01 Sep 2021 00:00:00 EST',\n    //     \"endDate\": '2021-09-15T00:00:00.000+09:00'\n    // },\n\n    // {\n    //     \"name\": \"TWICE: The Feels\",\n    //     \"startDate\": '23 Aug 2021 00:00:00 EST',\n    //     \"endDate\": '2021-10-01T13:00:00.000+09:00'\n    // },\n\n    // {\n    //     \"name\": \"ITZY: CRAZY IN LOVE\",\n    //     \"startDate\": '12 Aug 2021 00:00:00 EST',\n    //     \"endDate\": '2021-09-24T13:00:00.000+09:00'\n    // },\n\n\n    // {\n    //     \"name\": \"IU: strawberry moon\",\n    //     \"startDate\": '7 Oct 2021 12:00:00 EST',\n    //     \"endDate\": '2021-10-19T00:00:00.000+09:00'\n    // },\n\n    // {\n    //     \"name\": \"JEON SOMI: XOXO\",\n    //     \"startDate\": '2021-10-20T10:02:04.000Z',\n    //     \"endDate\": '2021-10-29T18:00:00.000+09:00'\n    // },\n\n\n\n\n    // {\n    //     \"name\": \"TWICE: Formula of Love: O+T=<3\",\n    //     \"startDate\": '08 Oct 2021 00:00:00 EST',\n    //     \"endDate\": '12 Nov 2021 00:00:00 EST'\n    // },\n\n    // {\n    //     \"name\": \"ITZY: It'z ITZY\",\n    //     \"startDate\": '2021-10-31T15:00:16.000Z',\n    //     \"endDate\": '2021-12-22T00:00:00.000+09:00'\n    // },\n    // {\n    //     \"name\": \"Christmas Day\",\n    //     \"startDate\": \"2021-01-01T00:00:00\",\n    //     \"endDate\": \"2021-12-25T00:00:00\",\n    // },\n\n    // {\n    //     \"name\": \"End of Year\",\n    //     \"startDate\": \"2021-01-01T00:00:00\",\n    //     \"endDate\": \"2022-01-01T00:00:00\",\n    // }\n\n    {\n        \"name\": \"End of year\",\n        \"startDate\": \"2022-01-01T00:00:00\",\n        \"endDate\": \"2023-01-01T00:00:00\",\n    },\n\n    {\n        \"name\": \"STAYC: YOUNG-LUV\",\n        \"startDate\": \"2022-02-06T15:00:04.000Z\",\n        \"endDate\": \"2022-02-21T18:00:00.000+09:00\",\n    },\n\n    {\n        \"name\": \"Weeekly: Play Game: Awake\",\n        \"startDate\": \"2022-02-14T15:00:10.000Z\",\n        \"endDate\": \"2022-03-07T18:00:00.000+09:00\",\n    }\n\n\n\n\n\n\n\n]\n\nexport default countdownDates;","import './App.css';\nimport CountdownCard from './components/CountdownCard';\nimport Clock from './components/Clock'\nimport { Grid, Box } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport countdownDates from './data/countdownDates.js';\n\n\nconst useStyles = makeStyles({\n  boxStyle: {\n    paddingTop: '5%',\n    paddingBottom: '5%',\n    paddingLeft: '5%',\n    paddingRight: '5%'\n  }\n})\n\n\nfunction App() {\n  //ISO Date with year should be YYYY-MM-DDTHH:MM:SSZ):\n  // for later: https://www.w3schools.com/js/js_date_formats.asp\n\n  const classes = useStyles();\n  return (\n    <Box className={classes.boxStyle}>\n      <Grid\n        container\n        spacing={4}\n        direction='column'\n        justifyContent='flex-start'\n        alignItems='stretch'\n      >\n        <Grid item xs={12} spacing={4}>\n          <Clock />\n        </Grid>\n        <Grid item xs={12} spacing={4}>\n          <Grid container spacing={4}>\n            {countdownDates.map(dateObj => {\n              return (\n                <Grid item xs={12} spacing={4}>\n                  <CountdownCard date={dateObj} />\n                </Grid>\n              );\n            })}\n          </Grid>\n        </Grid>\n      </Grid>\n\n    </Box>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}